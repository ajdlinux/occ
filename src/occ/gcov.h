#ifndef __GCOV_H
#define __GCOV_H

/** @file gcov.h
 *  @brief Header file to generate gcov_info chain for each module.
 *
 *  Each gcov-instrumented module needs to have its own gcov_info chain
 *  and associated linking function.  Each .o file will have its own
 *  gcov_info object which is added to the chain when the module is loaded
 *  (static initializers) by calling the __gcov_init function.
 *
 *  We make the gcov_info chain unique per-module, instead of a single
 *  global chain, so that we don't have bad pointers if a module was
 *  loaded and then unloaded.
 */
#ifdef GCOV_CODE_COVERAGE 

#include <stddef.h>
#include <stdint.h>
#include <string.h>

/** @struct gcov_info
 *  @brief Structure generated by gcc.  Do not use.
 *
 *  This structure is automatically generated and instances of it created by
 *  gcc when the --coverage compile option is used.  We don't need to
 *  manipulate this structure from code except:
 *      1) To fix up the chains as objects are added to the chain.
 *      2) To copy the gcov_info and counters into the base-chain when we
 *         unload a module.
 *
 *  The rest of this structure is parsed by the Gcov.pm debug tool.
 *
 *  Most of the items in here are used as uint32_t's by gcov but are still
 *  aligned on a 64-bit boundary.  The unusedN fields are to ensure proper
 *  alignment.
 */
struct gcov_info
{
    uint32_t version;
    struct gcov_info* next;
    uint32_t timestamp;
    char* filename;
    uint32_t n_functions;
    void* functions;
    uint32_t counter_mask;
    uint32_t n_counters;
    uint64_t* counters;
} PACKED;

// Preprocessor magic to create a variable name based off the module name.
// GCOV_INFO_OBJ() will create a post-processed name like
// 'foobar_gcov_info_head' or 'core_gcov_info_head'.
#define __GCOV_PREFIX core
#define __GCOV_PREFIX_NAME "core"

#define __GCOV_INFO_OBJ(X,Y) X ## Y
#define _GCOV_INFO_OBJ(X,Y) __GCOV_INFO_OBJ(X,Y)
#define GCOV_INFO_OBJ() _GCOV_INFO_OBJ(__GCOV_PREFIX, _gcov_info_head)

/** Pointer to the beginning of the gcov_info chain for this module. */
struct gcov_info* GCOV_INFO_OBJ() = NULL;

/** Function called by module loading to add the object gcov_info instance
 *  to the chain.
 */
void __gcov_init(struct gcov_info* i_info)
{
    // Atomically push i_info onto the gcov_info_head stack.
    do
    {
        i_info->next = GCOV_INFO_OBJ();
    } while (!__sync_bool_compare_and_swap(&GCOV_INFO_OBJ(),
                                           i_info->next, i_info));
}


/** Unneeded function but must be defined to compile.
 *
 *  This function appears to be typically used by libgcov.so when instrumented
 *  on a real linux-based system.  It can be used to merge counters across
 *  multiple runs or when a 'fork' occurs.  It doesn't appear that this
 *  function ever gets called for us but the unresolved symbol is added to
 *  the module (by gcc) so we've created a stub here to pass compile.
 */
void __gcov_merge_add()
{
    while(1);
}


typedef void (*ctor)(void); 
extern void __CTOR_LIST__;
extern void __CTOR_END__;
#define __CTOR_LIST ((const ctor *) &__CTOR_LIST__)
#define __CTOR_END  ((const ctor *) &__CTOR_END__)
void gcov_entry() {
    ctor const *ptr = __CTOR_LIST;
    ctor const *end = __CTOR_END;
    while(ptr != end) {
        if(*ptr)
            (*ptr)();
        ptr++;
    }
}

#endif

#endif

